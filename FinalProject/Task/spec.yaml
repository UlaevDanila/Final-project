openapi: 3.0.0
info:
  title: Интернет-магазин API
  description: RESTful API для управления каталогом товаров, корзинами и заказами.
  version: 1.0.0

servers:
  - url: http://localhost:3000/api/v1
    description: Local development server

security:
  - basicAuth: []

paths:
  /products:
    get:
      summary: Получить список всех товаров
      operationId: getProducts
      tags:
        - Products
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
        '500':
          description: Internal server error

    put:
      summary: Добавить новый товар
      operationId: addProduct
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
        '409':
          description: Product already exists
        '500':
          description: Internal server error

  /products/{id}:
    get:
      summary: Получить конкретный товар по ID
      operationId: getProductById
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Internal server error

    patch:
      summary: Обновить информацию о товаре
      operationId: updateProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Internal server error

    delete:
      summary: Удалить товар по ID
      operationId: deleteProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
        '500':
          description: Internal server error

  /carts:
    get:
      summary: Получить корзину текущего пользователя
      operationId: getCart
      tags:
        - Carts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    post:
      summary: Добавить товар в корзину
      operationId: addItemToCart
      tags:
        - Carts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '201':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    delete:
      summary: Очистить корзину
      operationId: clearCart
      tags:
        - Carts
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Cart cleared successfully
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /orders:
    get:
      summary: Получить список заказов текущего пользователя
      operationId: getOrders
      tags:
        - Orders
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    post:
      summary: Создать новый заказ
      operationId: createOrder
      tags:
        - Orders
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          example: 12345
        name:
          type: string
          example: iPhone XR
        price:
          type: number
          format: float
          example: 59999.00
        imageUrl:
          type: string
          example: https://example.com/images/product.jpg
        description:
          type: string
          example: The best smartphone ever!

    Cart:
      type: object
      properties:
        id:
          type: string
          example: abcdefghijkl
        userId:
          type: string
          example: 987654321
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'

    CartItem:
      type: object
      properties:
        productId:
          type: string
          example: 12345
        quantity:
          type: integer
          example: 2

    Order:
      type: object
      properties:
        id:
          type: string
          example: order_123456789
        userId:
          type: string
          example: 987654321
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderedProduct'
        totalPrice:
          type: number
          format: float
          example: 119998.00
        status:
          type: string
          enum: [pending, processing, shipped, delivered]
          example: pending
        shippingAddress:
          type: string
          example: ул. Ленина, д. 25, кв. 17, г. Москва, Россия, 125009
        paymentMethod:
          type: string
          example: card

    OrderedProduct:
      type: object
      properties:
        productId:
          type: string
          example: 12345
        quantity:
          type: integer
          example: 2
        unitPrice:
          type: number
          format: float
          example: 59999.00

    OrderRequest:
      type: object
      properties:
        shippingAddress:
          type: string
          example: ул. Ленина, д. 25, кв. 17, г. Москва, Россия, 125009
        paymentMethod:
          type: string
          example: card

  securitySchemes:
    BasicAuth:
      type: http
      description: Basic HTTP authentication login:password base64
      scheme: basic
      in: header